${operation.name}Outcome ${className}::${operation.name}(${constText}${operation.request.shape.name}& request) const
{
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/ServiceClientOperationRequestRequiredMemberValidate.vm")
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/ServiceClientOperationEndpointPrepareCommonBody.vm")
#if($operation.http.requestUri.contains("?"))
  Aws::StringStream ss;
#end
#set($uriParts = $operation.http.requestUriParts)
#set($uriVars = $operation.http.requestParameters)
#set($partIndex = 1)
#set($uriPartString = "${uriParts.get(0)}")
#set($queryStart = false)
#if($uriPartString.contains("?"))## if (request uri contains query) ----------
#set($queryStart = true)
#set($pathAndQuery = $operation.http.splitUriPartIntoPathAndQuery($uriPartString))
#if(!$pathAndQuery.get(0).isEmpty())
  uri.AddPathSegments("${pathAndQuery.get(0)}");
#end
  ss.str("${pathAndQuery.get(1)}");
#elseif(!$uriPartString.equals("/"))
  uri.AddPathSegments("$uriPartString");
#end## ---------------------------- if (request uri contains query) end ------
#foreach($var in $uriVars)## for (parameter in request uri parameters) -------
#set($varIndex = $partIndex - 1)
#set($uriVar = $uriVars.get($varIndex).replace('+', ''))
#set($greedySyntax = $uriVars.get($varIndex).contains("+"))
#set($partShapeMember = $operation.request.shape.getMemberByLocationName($uriVar))
#if($partShapeMember.shape.enum)
#set($parameter = "${partShapeMember.shape.name}Mapper::GetNameFor${partShapeMember.shape.name}(request.Get${CppViewHelper.convertToUpperCamel($operation.request.shape.getMemberNameByLocationName($uriVar))}())")
#else
#set($parameter = "request.Get${CppViewHelper.convertToUpperCamel($operation.request.shape.getMemberNameByLocationName($uriVar))}()")
#end
#if($queryStart)
  ss << $parameter;
#else
#if($greedySyntax)
  uri.AddPathSegments($parameter);
#else
  uri.AddPathSegment($parameter);
#end
#end
#if($uriParts.size() > $partIndex)
#set($uriPartString = "${uriParts.get($partIndex)}")
#if(!$queryStart && $uriPartString.contains("?"))
#set($queryStart = true)
#set($pathAndQuery = $operation.http.splitUriPartIntoPathAndQuery($uriPartString))
#if(!$pathAndQuery.get(0).isEmpty())
  uri.AddPathSegments("${pathAndQuery.get(0)}");
#end
  ss.str("${pathAndQuery.get(1)}");
#elseif(!$uriPartString.equals("/"))
  uri.AddPathSegments("$uriPartString");
#end
#end
#set($partIndex = $partIndex + 1)
#end## --------------------- for (parameter in request uri parameters) end ---
#if($queryStart)
  uri.SetQueryString(ss.str());
#end
#if($operation.result && $operation.result.shape.hasStreamMembers())
  return ${operation.name}Outcome(MakeRequestWithUnparsedResponse(uri, request, Aws::Http::HttpMethod::HTTP_${operation.http.method}));
#elseif($operation.result && $operation.result.shape.hasEventStreamMembers())
  request.SetResponseStreamFactory(
      [&] { request.GetEventStreamDecoder().Reset(); return Aws::New<Aws::Utils::Event::EventDecoderStream>(ALLOCATION_TAG, request.GetEventStreamDecoder()); }
  );
  return ${operation.name}Outcome(MakeRequest(uri, request, Aws::Http::HttpMethod::HTTP_${operation.http.method}));
#else
  return ${operation.name}Outcome(MakeRequest(uri, request, Aws::Http::HttpMethod::HTTP_${operation.http.method}, ${operation.request.shape.signerName}));
#end
}

${operation.name}OutcomeCallable ${className}::${operation.name}Callable(${constText}${operation.request.shape.name}& request) const
{
  auto task = Aws::MakeShared< std::packaged_task< ${operation.name}Outcome() > >(ALLOCATION_TAG, [this, ${refText}request](){ return this->${operation.name}(request); } );
  auto packagedFunction = [task]() { (*task)(); };
  m_executor->Submit(packagedFunction);
  return task->get_future();
}

void ${className}::${operation.name}Async(${constText}${operation.request.shape.name}& request, const ${operation.name}ResponseReceivedHandler& handler, const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context) const
{
  m_executor->Submit( [this, ${refText}request, handler, context](){ this->${operation.name}AsyncHelper( request, handler, context ); } );
}

void ${className}::${operation.name}AsyncHelper(${constText}${operation.request.shape.name}& request, const ${operation.name}ResponseReceivedHandler& handler, const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context) const
{
  handler(this, request, ${operation.name}(request), context);
}